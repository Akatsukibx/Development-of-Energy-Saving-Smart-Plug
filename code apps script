/************* CONFIG *************/
const DATA_SHEET    = 'Data';
const LOG_SHEET     = 'Log';
const SUMMARY_SHEET = 'Summary';
const EXPECTED      = 'Smart_Plug';
const TZ            = 'Asia/Bangkok';

/************* Entrypoints *************/
function doPost(e){ return handleReq_(e, 'POST'); }
function doGet(e){  return handleReq_(e, 'GET');  }

/************* Main *************/
function handleReq_(e, method){
  const ss     = SpreadsheetApp.getActive();
  const dataSh = ss.getSheetByName(DATA_SHEET)    || ss.insertSheet(DATA_SHEET);
  const sumSh  = ss.getSheetByName(SUMMARY_SHEET) || ss.insertSheet(SUMMARY_SHEET);
  const logSh  = ss.getSheetByName(LOG_SHEET)     || ss.insertSheet(LOG_SHEET);

  ensureDataHeader_(dataSh);
  ensureSummaryHeader_(sumSh);
  ensureLogHeader_(logSh);

  // --- Parse payload ---
  const safe    = e || {};
  const headers = safe.headers || {};
  const ctHdr   = String(headers['content-type'] || headers['Content-Type'] || (safe.postData && safe.postData.type) || '').toLowerCase();
  const raw     = (safe.postData && safe.postData.contents) || '';
  let d = {};
  try {
    try { d = JSON.parse(raw || '{}'); } catch (_) {}
    if (!Object.keys(d).length && safe.parameter && Object.keys(safe.parameter).length) d = safe.parameter;
    if (!Object.keys(d).length && raw) d = parsePlain_(raw);
  } catch (err) {
    log_(logSh, method, 'parse-error', String(err), raw);
    return txt_('BAD_PAYLOAD');
  }

  // --- Auth ---
  const secret = headers['x-secret'] || headers['X-Secret'] || (d.k || d.K) ||
                 (safe.parameter && (safe.parameter.k || safe.parameter.K)) || '';
  const ok = EXPECTED ? (secret === EXPECTED) : true;
  log_(logSh, method, 'ct='+ctHdr, 'secret='+(ok?'ok':'bad'), raw || JSON.stringify(d));
  if (!ok) return txt_('FORBIDDEN');

  const ctParam = String((d.ct || (safe.parameter && safe.parameter.ct) || '')).trim().toLowerCase();

  /************* READ-ONLY ROUTES *************/
  // pull last meaningful state (กันกรณีเพิ่งตัดรอบแล้วค่าเป็น 0)
  if (ctParam === 'pull_state' || ctParam === 'last') {
    const latest = latestFromData_(dataSh);
    return json_(latest || { ok:false, reason:'NO_DATA' });
  }

  // peak window of today (เช่น 30 นาที)
  if (ctParam === 'peak_today') {
    const res = peakTodayWindowFromData_(dataSh, 30);
    return json_(res);
  }

  // (optional) peak by ymd=YYYYMMDD
  if (ctParam === 'peak_by_ymd') {
    const ymd = String(d.ymd || (safe.parameter && safe.parameter.ymd) || '');
    const res = peakWindowByYmd_(dataSh, ymd, 30);
    return json_(res);
  }

  // weekly/monthly summary trigger — ให้ชีตคำนวณเองจาก Summary!
  if (ctParam === 'weekly') {
    const wk = computeWeeklySummaryFromSheet_(sumSh);
    log_(logSh, 'WEEKLY_AUTO', wk.text, JSON.stringify({ thisWh:wk.thisWh, prevWh:wk.prevWh, days:wk.days }));
    return json_(wk);
  }
  if (ctParam === 'monthly') {
    const mo = computeMonthlySummaryFromSheet_(sumSh);
    log_(logSh, 'MONTHLY_AUTO', mo.text, JSON.stringify({ thisWh:mo.thisWh, prevWh:mo.prevWh, days:mo.days }));
    return json_(mo);
  }

  /************* WRITE DATA (live telemetry) *************/
  const now   = new Date();
  const ymd   = Utilities.formatDate(now, TZ, 'yyyy-MM-dd');

  // รวม peak ของวันนี้ (จากเดิมในชีต + ค่าที่เข้ามารอบนี้ + dWh ปัจจุบัน)
  const prevPeakToday = readLastPeakToday_(dataSh, ymd);
  const dWhNow        = num_(d.dWh) || 0;
  const incomingPeak  = Number(d.peakdailyWh || 0);
  const peakToday     = Math.max(dWhNow, incomingPeak, prevPeakToday);

  // append Data row
  const row = [
    now,
    onoff_(d.swA), onoff_(d.swB),
    num_(d.iIn), num_(d.vIn),
    num_(d.vA), num_(d.vB),
    num_(d.iA), num_(d.iB),
    num_(d.pA), num_(d.pB),
    num_(d.tC), num_(d.hum),
    tripText_(d.tripA), tripText_(d.tripB),
    num_(d.dWh), num_(d.wWh),
    num_(d.dWhPrev), num_(d.wWhPrev),
    num_(d.mWh), num_(d.mWhPrev),
    peakToday
  ];
  dataSh.appendRow(row);
  SpreadsheetApp.flush();

  // บันทึก Summary “เฉพาะตอนตัดรอบ” (วันละ 1 แถว) + peak ของวัน
  appendSummary_ON_CUT_ONLY_(sumSh, d, dataSh);

  // (optional logging)
  if (String(d.ct || '') === 'summary') {
    log_(logSh, 'SUMMARY', d.dailySummary || '', d.adviceSummary || '');
  }

  return txt_('OK');
}

/************* Headers *************/
function ensureDataHeader_(sh){
  const want = [
    'ts','swA','swB','iIn','vIn','vA','vB','iA','iB','pA','pB',
    'tC','hum','tripA','tripB',
    'dailyWh','weeklyWh','dailyWhPrev','weeklyWhPrev','monthWh','monthWhPrev',
    'peakdailyWh' // V
  ];
  if (sh.getLastRow() === 0){
    sh.appendRow(want);
  } else {
    const header = sh.getRange(1,1,1,sh.getMaxColumns()).getValues()[0].map(x=>String(x||'').trim());
    if (header.length < want.length){
      sh.getRange(1, header.length+1, 1, want.length-header.length)
        .setValues([want.slice(header.length)]);
    }
  }
}
function ensureSummaryHeader_(sh){
  // A..J
  const want = ['ts','dailyWh','dailyWhPrev','weeklyWh','weeklyWhPrev','monthWh','monthWhPrev','peakdailyWh','peakmonthWh','tips'];
  if (sh.getLastRow() === 0){
    sh.appendRow(want);
    return;
  }
  const header = sh.getRange(1,1,1,sh.getMaxColumns()).getValues()[0].map(x=>String(x||'').trim());
  if (header.length < want.length){
    sh.getRange(1, header.length+1, 1, want.length-header.length).setValues([want.slice(header.length)]);
  }
}
function ensureLogHeader_(sh){
  if (sh.getLastRow() === 0){
    sh.appendRow(['ts','method','tag','info']);
  }
}

/************* Summary writer (daily cut only) *************/
function appendSummary_ON_CUT_ONLY_(sh, d, dataSh){
  const near0 = v => Math.abs(Number(v)||0) < 1e-6;

  const dWh      = Number(d.dWh)||0;
  const dWhPrev  = Number(d.dWhPrev||0);
  const wWh      = Number(d.wWh)||0;
  const wWhPrev  = Number(d.wWhPrev)||0;
  const mWh      = Number(d.mWh)||0;
  const mWhPrev  = Number(d.mWhPrev)||0;

  // เฉพาะตอน “ตัดรอบวัน” เท่านั้น: dWh ≈ 0 และ dWhPrev > 0
  const isCut = ( near0(dWh) && !near0(dWhPrev) );
  if (!isCut) return;

  const dailyEff   = dWhPrev;
  const weeklyEff  = !near0(wWh) ? wWh : ( !near0(wWhPrev) ? wWhPrev : dWhPrev );
  const monthlyEff = !near0(mWh) ? mWh : ( !near0(mWhPrev) ? mWhPrev : 0 );

  const now  = new Date();
  const ymd  = Utilities.formatDate(now, TZ, 'yyyy-MM-dd');
  const peakD = calcPeakDailyForYmd_(dataSh, ymd);
  const peakM = Number(d.peakmonthWh || 0); // เผื่อในอนาคต

  // อัปเดตแถวของวันนี้ถ้ามีอยู่แล้ว (วันละแถวเดียว)
  const map = { ts:1 };
  const rowIndex = getSummaryRowIndex_(sh, ymd, map);
  if (rowIndex > 0){
    sh.getRange(rowIndex, 2, 1, 6).setValues([[dailyEff, dWhPrev, weeklyEff, wWhPrev, monthlyEff, mWhPrev]]);
    sh.getRange(rowIndex, 8, 1, 2).setValues([[peakD, peakM]]);
    sh.getRange(rowIndex, 10).setValue(String(d.adviceSummary || '')); // tips
    return;
  }

  // ยังไม่มี → เพิ่มใหม่
  sh.appendRow([ymd, dailyEff, dWhPrev, weeklyEff, wWhPrev, monthlyEff, mWhPrev, peakD, peakM, String(d.adviceSummary || '')]);
}

/************* Peak helpers *************/
function readLastPeakToday_(sh, ymdStr){
  const lastRow = sh.getLastRow();
  if (lastRow < 2) return 0;
  const lastTs = sh.getRange(lastRow, 1).getValue();
  const lastYmd = cellToYmd_(lastTs);
  if (lastYmd !== ymdStr) return 0;
  const lastPeak = Number(sh.getRange(lastRow, 22).getValue() || 0); // V
  return lastPeak || 0;
}
function calcPeakDailyForYmd_(dataSh, ymdStr){
  const lastRow = dataSh.getLastRow();
  if (lastRow < 2) return 0;
  const tsCol = dataSh.getRange(2, 1,  lastRow-1, 1).getValues(); // ts
  const pCol  = dataSh.getRange(2, 16, lastRow-1, 1).getValues(); // dailyWh (P)
  const vCol  = dataSh.getRange(2, 22, lastRow-1, 1).getValues(); // peakdailyWh (V)
  let peak = 0;
  for (let i=0;i<tsCol.length;i++){
    const ymd = cellToYmd_(tsCol[i][0]);
    if (ymd === ymdStr){
      const dwh = Number(pCol[i][0] || 0);
      if (dwh > peak) peak = dwh;
    }
  }
  for (let i=0;i<tsCol.length;i++){
    const ymd = cellToYmd_(tsCol[i][0]);
    if (ymd === ymdStr){
      const v = Number(vCol[i][0] || 0);
      if (v > peak) peak = v;
    }
  }
  return peak;
}

/************* Peak window (today/by ymd) *************/
function peakTodayWindowFromData_(sh, windowMin){
  const WMIN = windowMin || 30;
  const now  = new Date();
  const todayY = Utilities.formatDate(now, TZ, 'yyyy-MM-dd');

  const lastRow = sh.getLastRow();
  if (lastRow < 2) return { ok:false, reason:'NO_DATA' };

  const tsCol = sh.getRange(2, 1,  lastRow-1, 1).getValues(); // ts
  const dCol  = sh.getRange(2, 16, lastRow-1, 1).getValues(); // dailyWh

  const rows = [];
  for (let i=0;i<tsCol.length;i++){
    const ts = tsCol[i][0];
    if (!ts) continue;
    const ymd = cellToYmd_(ts);
    if (ymd === todayY){
      const t   = (ts instanceof Date) ? ts : new Date(ts);
      const dwh = Number(dCol[i][0] || 0);
      rows.push({ t, dwh });
    }
  }
  return peakWindowFromRows_(rows, WMIN);
}
function peakWindowByYmd_(sh, ymdStr, windowMin){
  const WMIN = windowMin || 30;

  const lastRow = sh.getLastRow();
  if (lastRow < 2) return { ok:false, reason:'NO_DATA' };

  const tsCol = sh.getRange(2, 1,  lastRow-1, 1).getValues();
  const dCol  = sh.getRange(2, 16, lastRow-1, 1).getValues();

  const rows = [];
  for (let i=0;i<tsCol.length;i++){
    const ts = tsCol[i][0];
    if (!ts) continue;
    const ymd = cellToYmd_(ts);
    if (String(ymd) === String(ymdStr)){
      const t   = (ts instanceof Date) ? ts : new Date(ts);
      const dwh = Number(dCol[i][0] || 0);
      rows.push({ t, dwh });
    }
  }
  return peakWindowFromRows_(rows, WMIN);
}
function peakWindowFromRows_(rows, WMIN){
  if (rows.length < 2) return { ok:false, reason:'NOT_ENOUGH' };
  // แตกเป็น “นาที” + ปริมาณพลังงานเพิ่มขึ้นต่อหนึ่งนาที
  const mins = [];
  for (let i=1;i<rows.length;i++){
    const prev = rows[i-1], cur = rows[i];
    let inc = cur.dwh - prev.dwh; if (inc < 0) inc = 0;
    const dtMin = Math.max(1, Math.round((cur.t - prev.t)/60000));
    const perMin = inc / dtMin;
    for (let k=0;k<dtMin;k++){
      mins.push({ t: new Date(prev.t.getTime() + (k+1)*60000), inc: perMin });
    }
  }
  if (!mins.length) return { ok:false, reason:'NO_MIN_SAMPLES' };

  // สไลด์วินโดว์
  let bestSum = 0, bestStart = mins[0].t;
  let sum = 0, L = 0;
  for (let R=0; R<mins.length; R++){
    sum += mins[R].inc;
    while ((mins[R].t - mins[L].t) >= WMIN*60000){
      sum -= mins[L].inc; L++;
    }
    if (sum > bestSum){
      bestSum  = sum;
      bestStart = new Date(mins[R].t.getTime() - (WMIN-1)*60000);
    }
  }
  const startStr = Utilities.formatDate(bestStart, TZ, 'HH:mm');
  const endStr   = Utilities.formatDate(new Date(bestStart.getTime()+WMIN*60000), TZ, 'HH:mm');
  return { ok:true, start:startStr, end:endStr, avgWh: Math.round(bestSum*100)/100 };
}

/************* Weekly/Monthly calculators (sheet-driven) *************/
function sumWithPrevDays_(sumSh, N){
  const lastRow = sumSh.getLastRow();
  if (lastRow < 2) return { thisSum:0, prevSum:0, count:0 };
  // อ่านคอลัมน์ B: dailyWh ล่าสุด 2N แถว
  const take = Math.min(2*N, lastRow - 1);
  const vals = sumSh.getRange(lastRow - take + 1, 2, take, 1).getValues();
  const arr  = vals.map(r => Number(r[0] || 0));
  const thisSlice = arr.slice(-N);
  const prevSlice = arr.slice(-2*N, -N);
  const sum = a => a.reduce((s,x)=>s+(Number(x)||0), 0);
  return { thisSum: sum(thisSlice), prevSum: sum(prevSlice), count: thisSlice.length };
}
function makeThaiUnits_(wh, digits){ return ((Number(wh)||0)/1000).toFixed(digits) + ' หน่วย'; }
function fmtPct_(cur, prev){
  if (!prev || prev <= 0) return '0% (ช่วงแรก)';
  const pct = Math.round(Math.abs((cur - prev)/prev)*100);
  return (cur >= prev ? 'เพิ่มขึ้น ' : 'ลดลง ') + pct + '%';
}
function computeWeeklySummaryFromSheet_(sumSh){
  const N = 7;
  const { thisSum, prevSum, count } = sumWithPrevDays_(sumSh, N);
  const text = `ใช้ไฟสัปดาห์นี้: ${makeThaiUnits_(thisSum, 2)} ${fmtPct_(thisSum, prevSum)} | แนะนำ: ปิดอุปกรณ์ที่ไม่ใช้`;
  return { ok:true, thisWh:thisSum, prevWh:prevSum, days:count, text };
}
function computeMonthlySummaryFromSheet_(sumSh){
  const N = 30;
  const { thisSum, prevSum, count } = sumWithPrevDays_(sumSh, N);
  const text = `ใช้ไฟเดือนนี้: ${makeThaiUnits_(thisSum, 2)} ${fmtPct_(thisSum, prevSum)} | แนะนำ: ตั้งเวลาปิดอัตโนมัติ`;
  return { ok:true, thisWh:thisSum, prevWh:prevSum, days:count, text };
}

/************* Latest pull (robust, lookback) *************/
function latestFromData_(sh){
  const lastRow = sh.getLastRow();
  if (lastRow < 2) return null;

  const lastCol  = sh.getLastColumn();
  const LOOKBACK = Math.min(2000, lastRow - 1); // ~1.5 วัน (ส่งทุกนาที)
  const startRow = lastRow - LOOKBACK + 1;
  const rows     = sh.getRange(startRow, 1, LOOKBACK, lastCol).getValues();

  let lastPrevD = 0, lastPrevW = 0, lastPrevM = 0;

  for (let i = rows.length - 1; i >= 0; i--) {
    const row = rows[i];
    const ts            = row[0];
    const dailyWh       = Number(row[15] || 0);
    const weeklyWh      = Number(row[16] || 0);
    const dailyWhPrev   = Number(row[17] || 0);
    const weeklyWhPrev  = Number(row[18] || 0);
    const monthWh       = Number(row[19] || 0);
    const monthWhPrev   = Number(row[20] || 0);

    if (dailyWhPrev  > 0 && lastPrevD === 0) lastPrevD = dailyWhPrev;
    if (weeklyWhPrev > 0 && lastPrevW === 0) lastPrevW = weeklyWhPrev;
    if (monthWhPrev  > 0 && lastPrevM === 0) lastPrevM = monthWhPrev;

    const effDaily   = dailyWh  > 0 ? dailyWh  : (dailyWhPrev  > 0 ? dailyWhPrev  : 0);
    const effWeekly  = weeklyWh > 0 ? weeklyWh : (weeklyWhPrev > 0 ? weeklyWhPrev : 0);
    const effMonthly = monthWh  > 0 ? monthWh  : (monthWhPrev  > 0 ? monthWhPrev  : 0);

    if (effDaily > 0 || effWeekly > 0 || effMonthly > 0 ||
        dailyWhPrev > 0 || weeklyWhPrev > 0 || monthWhPrev > 0) {

      const tsISO = (ts instanceof Date)
        ? Utilities.formatDate(ts, TZ, "yyyy-MM-dd'T'HH:mm:ss")
        : String(ts);

      return {
        ok: true,
        tsISO: tsISO,
        dWh: effDaily,
        wWh: effWeekly,
        mWh: effMonthly,
        dWhPrev: (dailyWhPrev  > 0 ? dailyWhPrev  : lastPrevD) || 0,
        wWhPrev: (weeklyWhPrev > 0 ? weeklyWhPrev : lastPrevW) || 0,
        mWhPrev: (monthWhPrev  > 0 ? monthWhPrev  : lastPrevM) || 0
      };
    }
  }
  return { ok:false, reason:'NO_MEANINGFUL_DATA' };
}

/************* Utils *************/
function num_(x){ return (x === '' || x === null || x === undefined) ? '' : Number(x); }
function isTrue_(v){ return v===true || v===1 || v==='1' || String(v).toLowerCase()==='true' || v==='เปิด' || v==='ตัดแล้ว'; }
function onoff_(v){ return isTrue_(v) ? 'เปิด' : 'ปิด'; }
function tripText_(v){ return isTrue_(v) ? 'ตัดแล้ว' : 'ปกติ'; }
function parsePlain_(raw){
  // รองรับทั้ง a=b&c=d และ CSV 'a,b,c,...' (ถ้าจำนวนฟิลด์ >= 21 คือชุดเต็ม)
  const res = {};
  const parts = raw.split(/[,|]/).map(s => s.trim());
  if (parts.length >= 21){
    [res.swA,res.swB,res.iIn,res.vIn,res.vA,res.vB,res.iA,res.iB,res.pA,res.pB,res.tC,res.hum,res.tripA,res.tripB,
     res.dWh,res.wWh,res.dWhPrev,res.wWhPrev,res.mWh,res.mWhPrev,res.peakdailyWh] = parts;
    return res;
  }
  raw.split(/[\n&]+/).forEach(seg=>{
    if (!seg) return;
    const i = seg.indexOf('=');
    if (i >= 0){
      const k = seg.slice(0,i).trim();
      const v = seg.slice(i+1).trim();
      if (k) res[k] = v;
    } else {
      const k = seg.trim();
      if (k) res[k] = '';
    }
  });
  return res;
}
function cellToYmd_(v){
  if (v instanceof Date) return Utilities.formatDate(v, TZ, 'yyyy-MM-dd');
  const s = String(v||'').trim();
  if (/^\d{4}-\d{2}-\d{2}$/.test(s)) return s;
  const d = new Date(s); if (!isNaN(d.getTime())) return Utilities.formatDate(d, TZ, 'yyyy-MM-dd');
  return s;
}
function getSummaryRowIndex_(sh, ymd, map){
  const lastRow = sh.getLastRow();
  if (lastRow < 2) return 0;
  const col = map.ts || 1;
  const vals = sh.getRange(2, col, lastRow-1, 1).getValues();
  for (let i=0;i<vals.length;i++){
    if (cellToYmd_(vals[i][0]) === ymd) return 2+i;
  }
  return 0;
}
function log_(sh, method, tag, info1, info2){
  try{ sh.appendRow([new Date(), method, tag, (info2? (String(info1)+' | '+String(info2)) : String(info1)) ]); }catch(_){}
}
function txt_(s){ return ContentService.createTextOutput(String(s)); }
function json_(o){ return ContentService.createTextOutput(JSON.stringify(o)).setMimeType(ContentService.MimeType.JSON); }
